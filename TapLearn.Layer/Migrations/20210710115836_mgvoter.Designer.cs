// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapLearn.Layer.Context;

namespace TapLearn.Layer.Migrations
{
    [DbContext(typeof(TopLearnContext))]
    [Migration("20210710115836_mgvoter")]
    partial class mgvoter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseEpisod", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CId")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EpisodeTime")
                        .HasColumnType("time");

                    b.Property<string>("EpisodeTitle")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.HasKey("EpisodeId");

                    b.HasIndex("CId");

                    b.ToTable("courseEpisods");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupTitel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("courseGroups");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LevelId");

                    b.ToTable("courseLevels");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusTitel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StatusId");

                    b.ToTable("courseStatuses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseVolte", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("Volte")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VoteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("userId");

                    b.ToTable("courseVoltes");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.Curse", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseImageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CoursePrice")
                        .HasColumnType("int");

                    b.Property<string>("CourseTitel")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Lid")
                        .HasColumnType("int");

                    b.Property<int>("SId")
                        .HasColumnType("int");

                    b.Property<int?>("SubGroup")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateData")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("Lid");

                    b.HasIndex("SId");

                    b.HasIndex("SubGroup");

                    b.HasIndex("TeacherId");

                    b.ToTable("curses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.Property<int?>("curseCourseId")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("Userid");

                    b.HasIndex("curseCourseId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Order.Details", b =>
                {
                    b.Property<int>("DetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<int>("OId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("DetailsId");

                    b.HasIndex("Courseid");

                    b.HasIndex("OId");

                    b.ToTable("detail");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFainally")
                        .HasColumnType("bit");

                    b.Property<int>("OrderSum")
                        .HasColumnType("int");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("Uid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Orders.DisCount", b =>
                {
                    b.Property<int>("DisCountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsableCount")
                        .HasColumnType("int");

                    b.HasKey("DisCountId");

                    b.ToTable("disCounts");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.Role", b =>
                {
                    b.Property<int>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleTitel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Roleid");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UseCourse", b =>
                {
                    b.Property<int>("UC_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("courseid")
                        .HasColumnType("int");

                    b.Property<int?>("curseCourseId")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("UC_id");

                    b.HasIndex("curseCourseId");

                    b.HasIndex("userid");

                    b.ToTable("useCourses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.User", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RegisterDate")
                        .HasMaxLength(200)
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAvatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Userid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UserDiscountCode", b =>
                {
                    b.Property<int>("US_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisCountId")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("US_Id");

                    b.HasIndex("DisCountId");

                    b.HasIndex("Userid");

                    b.ToTable("userDiscountCodes");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UserRole", b =>
                {
                    b.Property<int>("UR_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("UR_Id");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("userRoles");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Wallet.WalletType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitel")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeId");

                    b.ToTable("walletTypes");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Wallet.wallet", b =>
                {
                    b.Property<int>("walletid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("walletid");

                    b.HasIndex("TypeId");

                    b.HasIndex("Userid");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.permission.RolePermission", b =>
                {
                    b.Property<int>("RP_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.HasKey("RP_ID");

                    b.HasIndex("PermissionId");

                    b.HasIndex("Roleid");

                    b.ToTable("rolePermissions");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.permission.permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseEpisod", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.Curse", "Course")
                        .WithMany("courseEpisods")
                        .HasForeignKey("CId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseGroup", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.CourseGroup", null)
                        .WithMany("CourseGroups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseVolte", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.Curse", "Course")
                        .WithMany("courseVoltes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("courseVoltes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.Curse", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.CourseGroup", "CourseGroup")
                        .WithMany("Courses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.Course.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("Lid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.Course.CourseStatus", "CourseStatus")
                        .WithMany("Courses")
                        .HasForeignKey("SId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.Course.CourseGroup", "Group")
                        .WithMany("SubGroup")
                        .HasForeignKey("SubGroup");

                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CourseGroup");

                    b.Navigation("CourseLevel");

                    b.Navigation("CourseStatus");

                    b.Navigation("Group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.Note", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("notes")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.Course.Curse", "curse")
                        .WithMany("notes")
                        .HasForeignKey("curseCourseId");

                    b.Navigation("curse");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Order.Details", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.Curse", "Curse")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.Order.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curse");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Order.Order", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UseCourse", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Course.Curse", "curse")
                        .WithMany("UseCourses")
                        .HasForeignKey("curseCourseId");

                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("UseCourses")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("curse");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UserDiscountCode", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Orders.DisCount", "disCount")
                        .WithMany("discountCode")
                        .HasForeignKey("DisCountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.User.User", "user")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("disCount");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.UserRole", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.User.User", "User")
                        .WithMany("userRoles")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Wallet.wallet", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.Wallet.WalletType", "WalletType")
                        .WithMany("Wallet")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.User.User", "users")
                        .WithMany("Wallets")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("users");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.permission.RolePermission", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.permission.permission", "permission")
                        .WithMany("rolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapLearn.Layer.Entites.User.Role", "rolo")
                        .WithMany("rolepermissions")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("rolo");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.permission.permission", b =>
                {
                    b.HasOne("TapLearn.Layer.Entites.permission.permission", null)
                        .WithMany("permissions")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseGroup", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("Courses");

                    b.Navigation("SubGroup");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.CourseStatus", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Course.Curse", b =>
                {
                    b.Navigation("courseEpisods");

                    b.Navigation("courseVoltes");

                    b.Navigation("notes");

                    b.Navigation("OrderDetails");

                    b.Navigation("UseCourses");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Order.Order", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Orders.DisCount", b =>
                {
                    b.Navigation("discountCode");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.Role", b =>
                {
                    b.Navigation("rolepermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.User.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("courseVoltes");

                    b.Navigation("notes");

                    b.Navigation("Orders");

                    b.Navigation("UseCourses");

                    b.Navigation("UserDiscountCodes");

                    b.Navigation("userRoles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.Wallet.WalletType", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("TapLearn.Layer.Entites.permission.permission", b =>
                {
                    b.Navigation("permissions");

                    b.Navigation("rolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
